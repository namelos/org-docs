* Using emacs, one thing feels it(acutally not emacs itself, just projectile) done right is projects. most of the IDEs and even editors ask you to 'open a project'. It's really rude and inconvinient to switch environments. 

* In emacs, I feel no limitation. I can do kanban at this second, and add code in the next second. Then submit code in magit in no time. And I can track your inspiration with scratch at any time.

* In other text editors, writing a plugin feels like writing a plugin(of course it does!). So I never wanted to write editor scripts to DRY things unless 1: there is a great plugin to do it, 2: I'll repeat this boring job more than one hundred times. However, in emacs, writing a function is just in-place change to elisp mode, and then eval several times to test if your thought works. If it works, give it a interactive form and bind a key. Ta-da, a brand new plugin, no restart required. So in emacs, it's very common to write scripts to DRY things you only do several times, amazing.

* An important way to avoid coincident complexity is to write extroverted codes, which means you need to make data / object et cet. to interactive more fast and more often. 
** For example, to avoid huge transaction for a traditional multi user table editing is to make submission and broadcasts in real time. Like google docs, thing happens in no time, users can see each others behaviours immediately, so confilict is resolved to minimum degree automatically.
** For version control system, it would be more clear. Why we prefer rebase and continuous integration to git flow and feature branch. The key it to confilict in (ideally every second) as less time as possible.
** For other kind of work with requires cooperating, the rule still applies. For example, during an agile inception process, or retrospection, or kanban developing tasking, everyone just use post-it to write things done. It looks some how stupid a little bit, but it not only help us write done things for ourselves to remind us to see if task is practical, but also and more importantly, gives us a way to fetch ideas, keeps everyone in the same vision. People in discussion only would be efficiency when they are in the same context, or there would be a lot of time wasting on mis-understandings.
